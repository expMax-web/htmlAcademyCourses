Технологи «Удара легенд» очень довольны после запуска опции с поиском игроков из предыдущего модуля!
На волне успеха они принесли ещё одну новую фичу. 
В игре, помимо лиг, доступны и гильдии, по которым также существуют свои таблицы лидеров. 
Технологи очень хотят, чтобы похожие по счёту игроки искались не только внутри лиг, но и внутри гильдий — вдруг игроки захотят вступить в гильдии с игроками с похожим счётом? 
Гипотеза странная, но стоит проверки.

Имея счёт игрока, нужно найти в таблице лидеров для гильдий игрока с таким же счётом и вернуть его название гильдии и место в гильдии.

Как и в случае с лигами, это «отсортированная матрица», только сортировка немного другая. 
Гильдии отсортированы сверху вниз по счёту самого «слабого» из их игроков. 
А внутри гильдии все игроки отсортированы по количеству очков, как и в прошлый раз.

Важное уточнение: в отличие от лиг, в таблице лидеров для гильдий в каждой гильдии находится одинаковое количество участников, то есть матрица является прямоугольной. 
Чтобы понять разницу между задачами, посмотрите на примерные данные, с которыми придётся работать (а заодно посмотрите на новую модель данных игроков в таблице):

[
  [
    {
      "login": "stypeano",
      "leaguePoints": 23,
      "guild": "seabass"
    },
    {
      "login": "rstrazir",
      "leaguePoints": 42,
      "guild": "seabass"
    }
  ],
  [
    {
      "login": "kinerber",
      "leaguePoints": 28,
      "guild": "goldfish"
    },
    {
      "login": "eridarma",
      "leaguePoints": 53,
      "guild": "goldfish"
    }
  ]
]
         
Для упрощения поиска бэкендеры помогли нам с выборкой, и в ней работает следующая сортировка:

в каждой строке все числа упорядочены по возрастанию,
в каждом столбце все числа упорядочены по возрастанию.
Для таких данных, если игрок набрал 53 очка, нам нужно вернуть объект:

{
  "guild": "goldfish",
  "placement": 1
}

placement здесь — положение игрока внутри своей гильдии.

То есть если мы разложим это в один массив, как хотели в прошлый раз, то бинарным поиском это не решить.

Решите эту задачу быстрее, чем за линейное (O(n*m)) время, используя парадигму «Разделяй и властвуй»!